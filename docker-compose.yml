name: e-commerce

volumes:
  postgres_data:
  azurite_data:

services:
  e-commerce.api:
    container_name: e-commerce.api
    image: ${DOCKER_REGISTRY-}ecommerceapi
    build:
      context: .
      dockerfile: src/E-commerce.API/Dockerfile
    depends_on:
      e-commerce.azurite:
        condition: service_started
      e-commerce.postgres:
        condition: service_started
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - AzureStorageConnectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://host.docker.internal:10000/devstoreaccount1;
      - ConnectionStrings__ECommerceLocal=Host=e-commerce.postgres;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
    volumes:
      - ./src:/src

  e-commerce.azurite:
    container_name: e-commerce.azurite
    image: mcr.microsoft.com/azure-storage/azurite
    command: "azurite-blob --blobHost 0.0.0.0 --blobPort 10000 --skipApiVersionCheck --location /workspace"
    ports:
      - "10000:10000"
    environment:
      - AZURITE_ACCOUNTS=devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    volumes:
      - azurite_data:/workspace

  e-commerce.postgres:
    image: postgres
    shm_size: "4gb"
    container_name: postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
